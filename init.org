#+TITLE: Emacs configuration
:PROPERTIES:
#+AUTHOR: Rianne van Rees
#+STARTUP: fold
#+PROPERTY: header-args :results silent :tangle yes
:END:

This configuration is inspired by these sources:

- [[https://github.com/jakebox/jake-emacs/blob/main/jake-emacs/init.el][Jake-emacs]]
- [[https://github.com/reinout/.emacs.d][My father's configuration]]
- [[https://lucidmanager.org/productivity/configure-emacs/][Writing studio]]

If I edit the configuration, I can tangle the org file using the command C-c C-v t. Then, if I go to the init.el file, I can use the command M-x ev-b (eval-buffer) to reload the emacs configuration without having to close the program.

* Start of the init file

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Riannes emacs configuration.
  ;; This file is exported from emacs.org.
  ;; URL: https://github.com/riannevanrees/.emacs.d
#+END_SRC

* Package archive list

#+begin_src emacs-lisp :tangle yes
  (use-package package
    :config
    (add-to-list 'package-archives
		 '("melpa" . "https://melpa.org/packages/"))
    (package-initialize))
#+end_src

* Prevent loading outdated files
I sometimes had some trouble that emacs would startup using an older version of the init file. This bit of code helps to avoid that. Apparently there is an init.el file and a compiled version init.elc. That last one is typically targeted, so when I evaluate the init.el in a session, it gave a different result from opening Emacs from scratch. This setting helps to avoid that.

#+begin_src emacs-lisp :tangle yes
  (setq load-prefer-newer t)
  (require 'auto-compile)
  (auto-compile-on-load-mode)
  (auto-compile-on-save-mode)
#+end_src

* Make sure emacs custom settings are written to custom.el

#+begin_src emacs-lisp :tangle yes
  (setq-default custom-file
		(expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

* Keep text in the center of the window
#+begin_src emacs-lisp :tangle yes
  (use-package olivetti
    :hook (text-mode prog-mode org-agenda-mode)
    :custom
    (olivetti-body-width 0.5)
    (olivetti-minimum-body-width 50)
    (olivetti-margin-width 7)
    (olivetti-style 'fancy))
#+end_src

* Typing
** Auto-complete

This code snippet loads the package which-key. It displays the key bindings that can follow a currently incomplete command, after a default waiting time of 1 second. 

#+begin_src emacs-lisp :tangle yes
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
    )
#+end_src

** Line wrapping

It is frustrating is lines continue endlessly or words are continued on a different line, because a certain character limit is reached. The goal of this bit is to automatically wrap lines at 88 characters.

M-q fills the current paragraph. At the moment, the visual-fill-column-mode needs to be specifically enabled. This is done with the command C-c v. [[https://github.com/reinout/.emacs.d/blob/main/init.el][Here]] it is followed up with some code to undo the filling if necessary, so I can choose to implement that if I should need it.

The package documentation of visual-fill-column recommends using setq-default to set fill-column. I'm not sure how to do that with use-package yet, :custom does setq, I believe.

Visual-fill-column also has an option that centers text, so now there are at least left and right margins.

#+begin_src emacs-lisp :tangle yes
   (use-package visual-fill-column
     :ensure t
     :bind ("C-c v" . visual-line-mode))
  (setq-default fill-column 80)
#+end_src

** Shorten yes and no

#+begin_src emacs-lisp :tangle yes
  (setq use-short-answers t) ;; When emacs asks for "yes" or "no", let "y" or "n" suffice
#+end_src

** Line distance

I'd like this value to be higher, but at the moment it also lengthens the cursor and applies both to text and to code and for code the value of 1 works better.
#+begin_src emacs-lisp :tangle yes
  (setq-default line-spacing 1)
#+end_src
* Icons

I don't tangle this package at the moment, because I'm not actually using it. But there's a chance that I will at some point, so for now I'll keep it in here as a reminder.

#+begin_src emacs-lisp :tangle no
  (use-package all-the-icons)
#+end_src

* Move backup files to a temporary directory

#+begin_src emacs-lisp :tangle yes
  (setq backup-directory-alist
	    `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
          `((".*" ,temporary-file-directory t)))
#+end_src

* Theme
I use a self-developed theme, with colors inspired by the Disney movie Sleeping Beauty, because I like the colors that are used. I am trying to make both a light and a dark version. The night scenes in the movie use quite different colors for the fairy dresses: Flora's normally red dress becomes purple, for example. By having such an explicit source of inspiration, I hope that the colors make more sense and avoid the angry fruit salad effect, that plagues certain emacs themes. Warnings and errors can be in Maleficent's colors: purple and green. Red is actually a positive color in this movie, because it is associated with Philip.

I prefer a variable pitch font over a fixed pitch font in most cases. Activating the package mixed-pitch-mode in all text-modes takes care of choosing the correct font.

#+begin_src emacs-lisp :tangle yes
  (use-package autothemer
  :ensure t)

  (use-package mixed-pitch
  :hook
  ;; If you want it in all text modes:
  (text-mode . mixed-pitch-mode))

  (load-theme 'sleeping-beauty t)
#+end_src

* Org

** TODO Look at org-indent-mode
** Custom TODOs
I edited the TODO keywords, so that I could see more easily where I was in the process.

#+begin_src emacs-lisp :tangle yes
  (setq org-todo-keywords
	'((sequence "TODO" "|" "DONE" "CANCELLED")
	  (sequence "LEZEN" "VERZETTELEN" "|" "VOLTOOID" "GEANNULEERD")
	  (sequence "LES" "VERZETTELEN" "|" "VOLTOOID" "GEANNULEERD")
	  (sequence "WACHTEN" "|" "VOLTOOID" "GEANNULEERD")
	  (sequence "SCHRIJVEN" "HERSCHRIJVEN" "|" "GESCHREVEN")))
#+end_src

#+begin_src emacs-lisp :tangle yes
  (setq org-fontify-todo-headline t)
#+end_src

** Use icons for headers and lists

#+begin_src emacs-lisp :tangle yes
  (use-package org-superstar
    ;:hook (org-mode . (lambda () (org-superstar-mode 1)))
    :custom
    (org-superstar-leading-bullet " ")
    (org-superstar-remove-leading-stars t)
    (org-superstar-todo-bullet-alist '(("TODO" . 9744)
				       ("LES" . 9744)
				       ("LEZEN" . 9744)
				       ("VERZETTELEN" . 9744)
				       ("DONE" . 9745)
				       ("VOLTOOID" 9745))))

  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+end_src

** Customize agenda

Org agenda is centered by olivetti mode.

This [[https://youtu.be/a_WNtuefREM?si=8zZC0Yt1afPpo_Mp][video by LibrePhoenix]] was helpful to designing this agenda.

#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "C-c a") 'org-agenda)
#+end_src

#+begin_src emacs-lisp :tangle yes
  (setq org-agenda-span 1
	org-agenda-start-day "+0d"
	org-agenda-skip-timestamp-if-done t
	org-agenda-skip-scheduled-if-deadline-is-shown t
	org-deadline-warning-days 7)

  (setq org-agenda-prefix-format '(
	(agenda . "%-12c%-12b ")
	;(agenda . "%-15b ")
	))

  (setq org-agenda-breadcrumbs-seperator "")
#+end_src

In my agenda, I want to see what I have scheduled today and what my deadlines for the upcoming week are. Next to that, a list of priorities and a list of todos that are in the VERZETTELEN state, would be helpful.

#+begin_src emacs-lisp :tangle yes
    (setq org-agenda-custom-commands
	  '(("v" "Agenda, zettelkasten en prioriteiten"
	     ((agenda ""
		      ((org-agenda-overriding-header "Agenda")))
	      (tags-todo "TODO=\"VERZETTELEN\""))
	     )))
#+end_src

#+begin_src emacs-lisp :tangle yes
      (use-package org-super-agenda
	:custom org-super-agenda-groups
	'(
	  (:name "Over datum"
		 :deadline past
		 :order 1
		 :face 'error)
	  (:name "Vandaag"
		 :time-grid t
		 :date today
		 :scheduled today
		 :scheduled past
		 :deadline today
		 :order 1)
	  (:name "Deadlines"
		 :deadline future
		 :order 2)
	  (:name "Belangrijk"
		 :priority "A"
		 :order 2)
	  ))
#+end_src

** Hide emphasis markers

No such package, so I don't tangle it for now.

#+begin_src emacs-lisp :tangle no
  (use-package org-appear
    :commands (org-appear-mode)
    :hook (org-mode . org-appear-mode)
    :init
    (setq org-hide-emphasis-markers t		;; A default setting that needs to be t for org-appear
	org-appear-autoemphasis t		;; Enable org-appear on emphasis (bold, italics, etc)
	org-appear-autolinks nil		;; Don't enable on links
	org-appear-autosubmarkers t))	;; Enable on subscript and superscript
#+end_src

** Other settings
#+begin_src emacs-lisp :tangle yes
  (setq org-blank-before-new-entry '((heading . t) (plain-list-item . auto)))
#+end_src
** Citations

[[https://kristofferbalintona.me/posts/202206141852/][Useful post about citations.]]

This bit of code does not work yet.

#+begin_src emacs-lisp :tangle no
  ;(org-cite-global-bibliography
  ; '("~/Documents/bronnen/bronnen.bib"))
  (org-cite-export-processors
   '(latex biblatex))
#+end_src

* Programming
*** Julia
I am trying out [[https://github.com/gcv/julia-snail][snail]] to run Julia.

#+begin_src emacs-lisp :tangle yes
  (use-package vterm
  :ensure t)

  (use-package julia-snail
    :ensure t
    :hook (julia-mode . julia-snail-mode))

  (use-package julia-formatter
    :hook julia-mode)
#+end_src

*** Python
#+begin_src emacs-lisp :tangle yes
(require 'conda)
#+end_src

This is a bit I found in my father's init.

#+begin_src emacs-lisp :tangle yes
  ;; exec-path-from-shell ensures the $PATH is set just like in your
  ;; terminal. This helps finding pipx-installed tools when starting
  ;; emacs from your OS
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns x))
    :ensure t
    :config
    (exec-path-from-shell-initialize)
    )
#+end_src

#+begin_src emacs-lisp :tangle yes
  (use-package python
  :config
  (setq python-check-command "ruff")
  (add-hook 'python-base-mode-hook 'eglot-ensure)
  )
#+end_src

#+begin_src emacs-lisp :tangle yes
  (use-package flymake)
#+end_src
* Not yet done

** PDF-tools

** Org mode

** Short answers
** Look at frame settings in Jake B's init
