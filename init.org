#+TITLE: Emacs configuration
:PROPERTIES:
#+AUTHOR: Rianne van Rees
#+STARTUP: fold
#+PROPERTY: header-args :results silent :tangle yes
:END:

This configuration is inspired by these sources:

- [[https://github.com/jakebox/jake-emacs/blob/main/jake-emacs/init.el][Jake-emacs]]
- [[https://github.com/reinout/.emacs.d][My father's configuration]]
- [[https://lucidmanager.org/productivity/configure-emacs/][Writing studio]]

If I edit the configuration, I can tangle the org file using the command C-c C-v t. Then, if I go to the init.el file, I can use the command M-x ev-b (eval-buffer) to reload the emacs configuration without having to close the program.

* Start of the init file

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Riannes emacs configuration.
  ;; This file is exported from emacs.org.
  ;; URL: https://github.com/riannevanrees/.emacs.d
#+END_SRC


* Package archive list

#+begin_src emacs-lisp :tangle yes
  (use-package package
    :config
    (add-to-list 'package-archives
		 '("melpa" . "https://melpa.org/packages/"))
    (package-initialize))
#+end_src


* Make sure emacs custom settings are written to custom.el

#+begin_src emacs-lisp :tangle yes
  (setq-default custom-file
		(expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src


* Typing
** Auto-complete

This code snippet loads the package which-key. It displays the key bindings that can follow a currently incomplete command, after a default waiting time of 1 second. 

#+begin_src emacs-lisp :tangle yes
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
    )
#+end_src

** Line wrapping and text-centering

It is frustrating is lines continue endlessly or words are continued on a different line, because a certain character limit is reached. The goal of this bit is to automatically wrap lines at 88 characters.

M-q fills the current paragraph. At the moment, the visual-fill-column-mode needs to be specifically enabled. This is done with the command C-c v. [[https://github.com/reinout/.emacs.d/blob/main/init.el][Here]] it is followed up with some code to undo the filling if necessary, so I can choose to implement that if I should need it.

The package documentation of visual-fill-column recommends using setq-default to set fill-column. I'm not sure how to do that with use-package yet, :custom does setq, I believe.

Visual-fill-column also has an option that centers text, so now there are at least left and right margins.

#+begin_src emacs-lisp :tangle yes
   (use-package visual-fill-column
     :ensure t
     :bind ("C-c v" . visual-line-mode))
  (setq-default fill-column 80)
  (setq-default visual-fill-column-center-text t)
  (global-visual-fill-column-mode)

  (use-package visual-line-mode
    :hook (text-mode prog-mode))
#+end_src

** Shorten yes and no

#+begin_src emacs-lisp :tangle yes
  (setq use-short-answers t) ;; When emacs asks for "yes" or "no", let "y" or "n" suffice
#+end_src

** Line distance

I'd like this value to be higher, but at the moment it also lengthens the cursor and applies both to text and to code and for code the value of 1 works better.
#+begin_src emacs-lisp :tangle yes
  (setq-default line-spacing 1)
#+end_src
* Icons

I don't tangle this package at the moment, because I'm not actually using it. But there's a chance that I will at some point, so for now I'll keep it in here as a reminder.

#+begin_src emacs-lisp :tangle no
  (use-package all-the-icons)
#+end_src

* Move backup files to a temporary directory

#+begin_src emacs-lisp :tangle yes
  (setq backup-directory-alist
	    `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
          `((".*" ,temporary-file-directory t)))
#+end_src

* Theme

#+begin_src emacs-lisp :tangle no
  (use-package gandalf-theme)
  (load-theme 'gandalf :no-confirm)
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package afternoon-theme)
  (load-theme 'afternoon t)
#+end_src

Disabled bit of code to load the modus vivendi theme. I disliked the look of the heading at level 2.
#+begin_src emacs-lisp :tangle no
  (use-package modus-themes
  :ensure t
  :config
  (setq modus-themes-italic-constructs t
	modus-themes-bold-constructs t)
  (load-theme 'modus-vivendi-tinted :no-confirm)
  )
#+end_src

These are the themes that were enabled in custom. I've removed them, because I was both adding themes in custom and in the init, so they were starting to contradict each other.

#+begin_src emacs-lisp :tangle no
  '(custom-enabled-themes '(klere gandalf))
 '(custom-safe-themes
   '("e613c2ffe0d6c9463d67f37275566ab3c47bdd70114fc3387738a4eb292ea156" "0af489efe6c0d33b6e9b02c6690eb66ab12998e2649ea85ab7cfedfb39dd4ac9" "afbf9f9095f71a175c9afc87c63e036544c99155e56fd1c0779c5519035ec650" default))
#+end_src

#+begin_src emacs-lisp :tangle no
  '(package-selected-packages
   '(cyberpunk-theme klere-theme gandalf-theme distinguished-theme afternoon-theme org-superstar all-the-icons auctex matlab-mode @ pdf-tools modus-themes markdown-mode better-defaults))
#+end_src

* Org

** Custom TODO keywords
I edited the TODO keywords, so that I could see more easily where I was in the process.

#+begin_src emacs-lisp :tangle yes
      (setq org-todo-keywords
	    '((sequence "TODO" "|" "DONE" "CANCELLED")
	      (sequence "LEZEN" "VERZETTELEN" "|" "VOLTOOID" "GEANNUELEERD")
	      (sequence "LES" "VERZETTELEN" "|" "VOLTOOID" "GEANNULEERD")
	      (sequence "WACHTEN" "|" "VOLTOOID" "GEANNULEERD")))
#+end_src

** Use icons for headers and lists

#+begin_src emacs-lisp :tangle yes
  (use-package org-superstar
    ;:hook (org-mode . (lambda () (org-superstar-mode 1)))
    :custom
    (org-superstar-leading-bullet " ")
    (org-superstar-remove-leading-stars t)
    (org-superstar-todo-bullet-alist '(("TODO" . 9744)
				       ("LES" . 9744)
				       ("LEZEN" . 9744)
				       ("VERZETTELEN" . 9744)
				       ("DONE" . 9745)
				       ("VOLTOOID" 9745))))

  (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+end_src

** Customize agenda

#+begin_src emacs-lisp :tangle yes
  (setq org-deadline-warning-days 7)
#+end_src

** Hide emphasis markers

No such package, so I don't tangle it for now.

#+begin_src emacs-lisp :tangle no
  (use-package org-appear
    :commands (org-appear-mode)
    :hook (org-mode . org-appear-mode)
    :init
    (setq org-hide-emphasis-markers t		;; A default setting that needs to be t for org-appear
	org-appear-autoemphasis t		;; Enable org-appear on emphasis (bold, italics, etc)
	org-appear-autolinks nil		;; Don't enable on links
	org-appear-autosubmarkers t))	;; Enable on subscript and superscript
#+end_src

* Not yet done

** PDF-tools

** Org mode

** Short answers
** Look at frame settings in Jake B's init
